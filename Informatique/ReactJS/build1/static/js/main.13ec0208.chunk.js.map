{"version":3,"sources":["components/Membre.js","components/button.js","App.js","serviceWorker.js","index.js"],"names":["Membre","nom","age","children","style","backgroundColor","color","toUpperCase","Button","vieillir","onClick","famille","membre1","membre2","App","state","handleClick","num","console","log","setState","handleChange","event","target","value","className","this","props","titre","onChange","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAaeA,G,MAXA,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,IAAIC,EAAkB,EAAlBA,IAAIC,EAAc,EAAdA,SACrB,OACI,kBAAC,WAAD,KACI,wBAAIC,MAAO,CAACC,gBAAiBH,EAAI,GAAG,SAAS,SAC5CI,MAAQJ,EAAI,GAAK,QAAS,UAD3B,SAEYD,EAAIM,cAFhB,QAEoCL,GACnCC,EAAS,2BAAIA,GAAc,kBAAC,WAAD,SCDzBK,G,MALA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACP,4BAAQC,QAASD,GAAjB,uBCEJE,EAAQ,CACVC,QAAS,CACPX,IAAI,QACJC,IAAI,IAENW,QAAS,CACPZ,IAAI,WACJC,IAAI,KAsCOY,E,4MAlCbC,MAAO,CAACJ,W,EAERK,YAAa,SAACC,GACZ,IAAMN,EAAQ,eAAI,EAAKI,MAAMJ,SAC7BA,EAAQC,QAAQV,KAAKe,EACrBC,QAAQC,IAAI,QACZ,EAAKC,SAAS,CAACT,a,EAGjBU,aAAc,SAACC,GACb,IAAMX,EAAQ,eAAI,EAAKI,MAAMJ,SACvBV,EAAIqB,EAAMC,OAAOC,MACvBN,QAAQC,IAAIlB,GACZU,EAAQC,QAAQX,IAAIA,EACpB,EAAKmB,SAAS,CAACT,a,uDAGP,IAAD,OACP,OACE,yBAAKc,UAAU,OACb,4BAAKC,KAAKC,MAAMC,OAChB,2BAAOJ,MAAOE,KAAKX,MAAMJ,QAAQC,QAAQX,IAAK4B,SAAUH,KAAKL,aAAcS,KAAK,SAChF,kBAAC,EAAD,CAAQ7B,IAAKyB,KAAKX,MAAMJ,QAAQC,QAAQX,IAAKC,IAAKwB,KAAKX,MAAMJ,QAAQC,QAAQV,MAC7E,kBAAC,EAAD,CAAQD,IAAKyB,KAAKX,MAAMJ,QAAQE,QAAQZ,IAAKC,IAAKwB,KAAKX,MAAMJ,QAAQE,QAAQX,MAC7E,6BACA,qDACA,6BACA,kBAAC,EAAD,CAAQO,SAAU,kBAAM,EAAKO,YAAY,W,GA5B/Be,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKX,MAAM,eAEbY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.13ec0208.chunk.js","sourcesContent":["import React, {Fragment} from 'react'\n\nconst Membre = ({nom,age,children}) => {\n    return (\n        <Fragment>\n            <h2 style={{backgroundColor: age<40?'yellow':'purple',\n             color : age<40 ? 'black': 'white'}}>\n                 Nom : {nom.toUpperCase()} Age:{age}</h2>\n            {children?<p>{children}</p>:<Fragment />}\n        </Fragment>\n       \n    )\n}\nexport default Membre","import React from 'react'\nimport './button.css';\nconst Button = ({ vieillir }) => (\n        <button onClick={vieillir}>\n            Vieillir de 2 ans\n        </button>     \n)\nexport default Button","import React, { Component} from 'react';\nimport './App.css';\nimport Membre from './components/Membre';\nimport Button from './components/button';\n\nvar famille={\n  membre1: {\n    nom:'Bruno',\n    age:49\n  },\n  membre2: {\n    nom:'Jeanette',\n    age:35\n  }\n}\nclass App extends Component {\n  state ={famille};\n\n  handleClick= (num) => {\n    const famille={...this.state.famille};\n    famille.membre1.age+=num;\n    console.log(\"Clic\");\n    this.setState({famille});\n  };\n\n  handleChange= (event) => {\n    const famille={...this.state.famille};\n    const nom=event.target.value;\n    console.log(nom);\n    famille.membre1.nom=nom;\n    this.setState({famille});\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>{this.props.titre}</h1>\n        <input value={this.state.famille.membre1.nom} onChange={this.handleChange} type='text'></input>\n        <Membre nom={this.state.famille.membre1.nom} age={this.state.famille.membre1.age}/>\n        <Membre nom={this.state.famille.membre2.nom} age={this.state.famille.membre2.age}/>\n        <br/>\n        <strong>je suis un chien.</strong>\n        <br/>\n        <Button vieillir={() => this.handleClick(2)}>\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App titre='mon titre'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}